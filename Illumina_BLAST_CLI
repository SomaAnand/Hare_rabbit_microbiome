{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing feature table from QIIME2 \n",
    "basedir = '/mnt/c/MinION_16S_barcodes/BLASTn/BLASTn/full_BLAST/'\n",
    "table_csv = os.path.join(basedir, '20190805_illumina_dada2.fasta.SILVA.besthit.outfmt6_1.tsv')\n",
    "table_df = pd.read_csv(table_csv, sep= '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6676"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of rows with unique OTU ID\n",
    "taxa_df['#OTU ID'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Importing BLAST Illumina output\n",
    "table1_csv = os.path.join(basedir, '20190805_illumina_dada2.fasta.SILVA.besthit.outfmt6')\n",
    "table1_df = pd.read_csv(table1_csv, sep= '\\t', names = [\"Query Seq-id\",\"Subject Seq-id\",\"evalue\",\"bitscore\",\"length\",\"pident\",\"nident\",\"subject-GI\",\"Subject_accession\",\"Subject_Taxonomy_ID\",\"Start_of_alignment\",\"End_of_alignment\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     6612\n",
       "False      64\n",
       "Name: #OTU ID, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of unique ID present in both QIIME2 feature table and BLAST output\n",
    "taxa_df['#OTU ID'].isin(taxa1_df['Query Seq-id']).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Processing the BLAST output table to only include Query seq-id and primaryAccession columns; Splitting the subject_accession into three columns in a new dataframe and merging only the first column with the table1_df dataframe\n",
    "table1_df.drop(columns=['Subject Seq-id', 'evalue', 'bitscore', 'length', 'pident','nident','subject-GI','Subject_Taxonomy_ID','Start_of_alignment','End_of_alignment'], inplace=True)\n",
    "table_df_1 = table1_df[\"Subject_accession\"].str.split(\".\",n=2,expand = True)\n",
    "table_df_1.columns = ['A', 'B', 'C']\n",
    "result = pd.concat([table1_df, table_df_1], axis=1)\n",
    "result.drop(columns=['Subject_accession', 'B','C'], inplace=True)\n",
    "result.rename(columns={'A': 'primaryAccession'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2105"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of unique accession numbers\n",
    "result['primaryAccession'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Merging the feature table from QIIME2 with the above processed table\n",
    "merged_df_1 = pd.merge(table_df,result, how = 'left', left_on = '#OTU ID', right_on = 'Query Seq-id')\n",
    "merged_df_1.fillna(value=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping the unrequired columns\n",
    "merged_df_1.drop(columns=['#OTU ID', 'Query Seq-id'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#reordering coulumn\n",
    "merged_df_2 = merged_df_1[['primaryAccession', 'Hare-control', 'MF-136', 'MF-138', 'MF-139','MF-140','MF-141','MF-142','MF-143','MF-144','MF-145','MF-146','MF-147','MF-148','MF-149','MF-150','MF-151','MF-152','MF-153','MF-154','MF-155','MF-156','MF-157','Rabbit-control','Stage1-NTC']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# renaming the column\n",
    "merged_df_2.rename(columns={'primaryAccession':'#OTU ID' }, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#grouping all the samples with their OTU ID by taking sum \n",
    "merged_df_3=merged_df_2.groupby(['#OTU ID']).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#importing silva_132 taxonomy mapping file\n",
    "basedir2 = '/mnt/c/MinION_16S_barcodes/BLASTn/BLASTn/taxonomy_files/'\n",
    "map_csv = os.path.join(basedir2, 'taxmap_slv_ssu_ref_132-corrected.txt')\n",
    "map_df = pd.read_csv(map_csv, sep= '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping columns\n",
    "map_df.drop(columns=['start','stop','organismName','taxid'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#removing duplicates\n",
    "map1_df = map_df.drop_duplicates(subset='primaryAccession', keep='first', inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#merging the processed feature table with the mapping file\n",
    "merged_df_4 = pd.merge(merged_df_3,map1_df, how = 'left', left_on = '#OTU ID', right_on = 'primaryAccession')\n",
    "merged_df_4.fillna(value='unassigned', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#dropping the columns not required for taxonomy file to use within QIIME2\n",
    "merged_df_4.drop(columns=['primaryAccession','Hare-control', 'MF-136', 'MF-138', 'MF-139','MF-140','MF-141','MF-142','MF-143','MF-144','MF-145','MF-146','MF-147','MF-148','MF-149','MF-150','MF-151','MF-152','MF-153','MF-154','MF-155','MF-156','MF-157','Rabbit-control','Stage1-NTC'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#renaming columns\n",
    "merged_df_4.rename(columns={'#OTU ID': 'Feature ID'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df_4.rename(columns={'path': 'Taxon'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Taxonomy file\n",
    "merged_df_4.to_csv(os.path.join(basedir1, '20190821_taxamap_illumina_dada2.tsv'),sep='\\t',header=True,index =False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#convert the feature table to biom format and import into qiime2\n",
    "#Taxonomy file can be imported in tsv format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
